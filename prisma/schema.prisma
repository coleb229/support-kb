// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  title     String
  content   String?
  published Boolean  @default(false) @map("isPublished")
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Discovery {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  title     String
  content   String?
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  @map("author")
}

model GuideSuggestion {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  title     String
  content   String?
  published Boolean  @default(false) @map("isPublished")
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?  @map("author")
}

model UserGuide {
  id             String           @id @default(cuid()) @map("_id")
  createdAt      String
  updatedAt      DateTime         @updatedAt @map("updatedAt")
  title          String
  steps          String[]
  uses           String[]
  images         String[]
  published      Boolean          @default(false) @map("isPublished")
  author         User?            @relation(fields: [authorId], references: [id])
  authorName     String?
  authorEmail    String?
  authorId       String?          @map("author")
  UserGuideImage UserGuideImage[]
}

model UserGuideImage {
  id        String     @id @default(cuid()) @map("_id")
  createdAt DateTime   @default(now()) @map("createdAt")
  updatedAt DateTime   @updatedAt @map("updatedAt")
  publicId  String
  format    String
  version   String
  published Boolean    @default(false) @map("isPublished")
  guide     UserGuide? @relation(fields: [guideId], references: [id])
  guideId   String?    @map("guide")
  authorId  String?    @map("author")
}

model User {
  id              String            @id @default(cuid()) @map("_id")
  createdAt       DateTime          @default(now()) @map("createdAt")
  updatedAt       DateTime          @updatedAt @map("updatedAt")
  email           String            @unique
  name            String?
  posts           Post[]
  discovery       Discovery[]
  guideSuggestion GuideSuggestion[]
  userGuide       UserGuide[]
}
